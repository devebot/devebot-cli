#!/usr/bin/env node

'use strict';

var Promise = require('bluebird');
var lodash = require('lodash');
var util = require('util');
var program = require('commander');
var homecfg = require('home-config');

var appinfo = require('../lib/utils/appinfo.js');
var logger = require('../lib/utils/logger.js');

var cfg = homecfg.load('.devebotrc', {
    devebot_host: '0.0.0.0',
    devebot_port: 17779,
    devebot_path: '/devebot'
});

var DevebotApi = require('devebot-api');

var devebot = new DevebotApi({
  host: cfg.devebot_host,
  port: cfg.devebot_port,
  path: cfg.devebot_path,
  logger: logger
});

devebot.on('started', function() {
  logger.debug(' The command is started');
});

devebot.on('success', function(data) {
  displayResult(data.value || data.result);
});

devebot.on('failure', function(data) {
  displayError(data.error);
});

devebot.on('done', function() {
  logger.debug(' - The command is done');
});

devebot.on('noop', function() {
  logger.debug(' - The command not found');
});

var buildCmdline = function(devebot, clidef, callback) {

  clidef = clidef || {};
  logger.trace(' * build commandline with definition: %s', JSON.stringify(clidef, null, 2));

  var commands = clidef.commands || [];

  for(var i=0; i<commands.length; i++) {
    var command = commands[i];
    
    var cmddef = program.command(command.name).description(command.description);
    
    var options = command.options || [];
    for(var k=0; k<options.length; k++) {
      var option = options[k];
      cmddef = cmddef.option(util.format('-%s --%s %s', 
          option.abbr, option.name, option.required?'<value>':'[value]'), 
          option.description);
    }
    
    var optionNames = lodash.map(options, function(option) {
      return option.name;
    });
    
    cmddef = cmddef.action((function(command, optionNames) {
      return function(values) {
        devebot.execCommand({
          name: command.name,
          options: lodash.pick(values, optionNames)
        }, callback);
      };
    })(command, optionNames));
  }
  
  program.parse(process.argv);
};

var displayResult = function(result) {
  console.log('');
  process.stdout.write(util.format('Command result: %s\n', JSON.stringify(result, null, 2)));
};

var displayError = function(error) {
  console.log('');
  if (lodash.isObject(error)) {
    if (error.name == 'restapi_request_error' || error.name == 'restapi_invalid_status') {
      [
        "Fatal error: Unable to find devebot service.",
        "",
        "If you're seeing this message, either the devebot service hasn't been installed,",
        "or it is running incorrectly.",
      ].forEach(function(str) { process.stderr.write(util.format('%s\n', str)); });
    } else {
      process.stderr.write(util.format('Command error: %s\n', JSON.stringify(error, null, 2)));
    }
  } else {
    process.stderr.write(util.format('Unknown error: %s\n', error));
  }
};

Promise.resolve().then(function() {
  return Promise.promisify(devebot.loadDefinition)();
}).then(function(clidef) {
  return Promise.resolve().then(function() {
    appinfo.displayCliHeader(clidef);
    return Promise.promisify(buildCmdline)(devebot, clidef);
  }).then(function() {
    appinfo.displayCliFooter(clidef);
    return Promise.resolve();
  });
}).catch(function(exception) {
  appinfo.displayCliFooter();
});
